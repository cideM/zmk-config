#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

&sk {
  release-after-ms = <900>;
  quick-release;
};

/ {
    chosen {
       zmk,physical-layout = &layout_ortho_4x12_all1u;
    };

    behaviors {

      ret_lt: hold_tap_1 {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = <300>;
        quick-tap-ms = <200>;
        flavor = "tap-unless-interrupted";
        bindings = <&mo>, <&kp>;
      };

      // tap: sticky shift; double tap: caps_word
      td_shift: tap_dance_0 {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&sk LSHFT>, <&caps_word>;
      };
        
      // hold: shift, tap: td_shift 
      // Why the need for a dummy parameter at the call site?
      // https://github.com/zmkfirmware/zmk/issues/1643
      shft: hold_tap {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <0>;
        flavor = "tap-unless-interrupted";
        bindings = <&kp>, <&td_shift>;
      };

      hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <250>;
        quick-tap-ms = <200>;
        bindings = <&kp>, <&kp>;
        hold-trigger-on-release;
        require-prior-idle-ms = <120>;
      };
    };

    cond_layers {
      compatible = "zmk,conditional-layers";
      tri {
          if-layers = <1 2>;
          then-layer = <3>;
      };
    };
    
    keymap {
        compatible = "zmk,keymap";

        default_layer {
          bindings = <
            // 0           1          2          3           4            5        | 6             7             8           9          10            11
            &mt LALT  TAB  &kp Q      &kp W      &kp E       &kp R        &kp T      &kp Y         &kp U         &kp I       &kp O      &kp P         &kp BSPC
            // 12          13         14         15          16           17       | 18            19            20          21         22            23
            &mt LCTRL ESC  &hm LGUI A &hm LALT S &hm LCTRL D &hm LSHFT F  &kp G      &kp H         &hm RSHFT J   &hm RCTRL K &hm RALT L &hm RGUI SEMI &mt RCTRL SQT
            // 24          25         26         27          28           29       | 30            31            32          33         34            35
            &kp LSHFT      &kp Z      &kp X      &kp C       &kp V        &kp B      &kp N         &kp M         &kp COMMA   &kp DOT    &kp FSLH      &mt RSHFT RET
            // 36          37         38         39          40           41       | 42            43            44          45         46            47
            &kp CAPS       &kp C_MUTE &kp C_PP   &kp LALT    &mo 1        &kp SPACE  &shft LSHFT 0 &ret_lt 2 RET &kp LEFT    &kp DOWN   &kp UP        &kp RIGHT
          >;
        };

        lower {
          bindings = <
            &kp LS(GRAVE) &kp LS(N1)   &kp LS(N2)   &kp LS(N3)   &kp LS(N4)   &kp LS(N5) &kp LS(N6) &kp LS(N7)      &kp LS(N8)     &kp LS(N9)    &kp LS(N0)    &kp DEL
            &kp DEL       &hm LGUI F1  &hm LALT F2  &hm LCTRL F3 &hm LSHFT F4 &kp F5     &kp F6     &hm RSHFT UNDER &hm RCTRL PLUS &hm RALT LBRC &hm RGUI RBRC &kp PIPE    
            &trans        &kp F7       &kp F8       &kp F9       &kp F10      &kp F11    &kp F12    &kp LBKT        &kp RBKT       &kp HOME      &kp END       &trans
            &trans        &trans       &trans       &trans       &trans       &trans     &trans     &trans          &kp C_NEXT     &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PP
          >;
        };

        raise {
          bindings = <
              &kp GRAVE &kp N1        &kp N2             &kp N3           &kp N4              &kp N5  &kp N6  &kp N7              &kp N8              &kp N9            &kp N0        &caps_word
              &kp DEL   &hm LGUI LEFT &hm LALT DOWN      &hm LCTRL UP     &hm LSHFT RIGHT     &kp F5  &kp F6  &hm RSHFT MINUS     &hm RCTRL EQUAL     &hm RALT LBKT     &hm RGUI RBKT &kp BSLH    
              &trans    &kp F7        &kp F8             &kp F9           &kp F10             &kp F11 &kp F12 &kp HASH            &kp BSLH            &kp PG_UP         &kp PG_DN     &trans
              &trans    &trans        &trans             &trans           &trans              &trans  &trans  &trans              &kp C_NEXT          &kp C_VOL_DN      &kp C_VOL_UP  &kp C_PP
          >;
        };

        adjust {
          bindings = <
              &trans    &kp K_LOCK &trans   &trans &trans    &trans  &trans  &kp C_BRI_AUTO &kp C_BRI_DN &kp C_BRI_UP   &trans  &trans
              &trans    &trans     &trans   &trans &trans    &trans  &trans  &kp C_MUTE     &kp C_VOL_DN &kp C_VOL_UP   &trans  &trans
              &trans    &trans     &trans   &trans &trans    &trans  &trans  &kp C_PP       &kp C_PREV   &kp C_NEXT     &trans  &trans
              &trans    &trans     &trans   &trans &trans    &trans  &trans  &trans         &trans       &trans         &trans  &trans
          >;
        };

    };
};
  
/* vim: set ft=c tw=146: nowrap: */
