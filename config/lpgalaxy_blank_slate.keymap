#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    chosen {
       zmk,physical-layout = &layout_ortho_4x12_all1u;
    };

    behaviors {
      hm: homerow_mods {
          compatible = "zmk,behavior-hold-tap";
          #binding-cells = <2>;
          tapping-term-ms = <150>;
          quick-tap-ms = <200>;
          require-prior-idle-ms = <100>;
          flavor = "tap-preferred";
          bindings = <&kp>, <&kp>;
      };

      lh_pht: left_positional_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <200>;                        // <---[[produces tap if held longer than tapping-term-ms]]
        quick-tap-ms = <200>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34>;    // <---[[right-hand keys]]
        require-prior-idle-ms = <100>;
        hold-trigger-on-release;
      };
      
      Let's see if this is better now? First impression is actually really good. I think I am finally on to something. I think it's the balanced behavior that is doing the heavy lifting here.
      I currently have almost no accidental activations. In fact I have zero. Rather I am finding it a bit hard to actually trigger the home row mods. The trick is that with balanced the other
      key has to be both pressed and released for it to register. I doubt that I even need the idle ms right now. Let's try some of the weird inputs from the typing test.
      Indeed typing currentTag is a struggle since getting that upper case T is hard. Not sure if it's because of the idle time or the other.

      rh_pht: right_positional_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <200>;                        // <---[[produces tap if held longer than tapping-term-ms]]
        quick-tap-ms = <200>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29>;    // <---[[right-hand keys]]
        require-prior-idle-ms = <100>;
        hold-trigger-on-release;
      };
    };

    cond_layers {
      compatible = "zmk,conditional-layers";
      tri {
          if-layers = <1 2>;
          then-layer = <3>;
      };
    };
    
    keymap {
        compatible = "zmk,keymap";

        default_layer {
          bindings = <
            // 0          1              2              3               4                5        | 6        7               8               9              10                11
            &kp TAB       &kp Q          &kp W          &kp E           &kp R            &kp T      &kp Y    &kp U           &kp I           &kp O          &kp P             &kp BSPC
            // 12         13             14             15              16               17       | 18       19              20              21             22                23
            &mt LCTRL ESC &lh_pht LGUI A &lh_pht LALT S &lh_pht LCTRL D &lh_pht LSHIFT F &kp G      &kp H    &rh_pht RSHFT J &rh_pht RCTRL K &rh_pht RALT L &rh_pht RGUI SEMI &mt RCTRL SQT
            // 24         25             26             27              28               29       | 30       31              32              33             34                35
            &kp LSHFT     &kp Z          &kp X          &kp C           &kp V            &kp B      &kp N    &kp M           &kp COMMA       &kp DOT        &kp FSLH          &mt RSHFT RET
            // 36         37             38             39              40               41       | 42       43              44              45             46                47
            &kp CAPS      &kp C_MUTE     &kp C_PP       &kp LALT        &mo 1            &kp SPACE  &kp LGUI &lt 2 RET       &kp LEFT        &kp DOWN       &kp UP            &kp RIGHT
          >;
        };

        lower {
          bindings = <
              &kp LS(GRAVE) &kp LS(N1) &kp LS(N2) &kp LS(N3) &kp LS(N4) &kp LS(N5) &kp LS(N6) &kp LS(N7)   &kp LS(N8)   &kp LS(N9)   &kp LS(N0)   &kp DEL
              &kp DEL       &kp F1     &kp F2     &kp F3     &kp F4     &kp F5     &kp F6     &kp UNDER    &kp PLUS     &kp LBRC     &kp RBRC     &kp PIPE
              &trans        &kp F7     &kp F8     &kp F9     &kp F10    &kp F11    &kp F12    &kp LBKT     &kp RBKT     &kp HOME     &kp END      &trans
              &trans        &trans     &trans     &trans     &trans     &trans     &trans     &trans       &kp C_NEXT   &kp C_VOL_DN &kp C_VOL_UP &kp C_PP
          >;
        };

        raise {
          bindings = <
              &kp GRAVE &kp N1   &kp N2   &kp N3 &kp N4    &kp N5  &kp N6  &kp N7    &kp N8     &kp N9       &kp N0       &caps_word
              &kp DEL   &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp F5  &kp F6  &kp MINUS &kp EQUAL  &kp LBKT     &kp RBKT     &kp BSLH
              &trans    &kp F7   &kp F8   &kp F9 &kp F10   &kp F11 &kp F12 &kp HASH  &kp BSLH   &kp PG_UP    &kp PG_DN    &trans
              &trans    &trans   &trans   &trans &trans    &trans  &trans  &trans    &kp C_NEXT &kp C_VOL_DN &kp C_VOL_UP &kp C_PP
          >;
        };

        adjust {
          bindings = <
              &trans    &kp K_LOCK &trans   &trans &trans    &trans  &trans  &kp C_BRI_AUTO &kp C_BRI_UP &kp C_BRI_DN   &trans  &trans
              &trans    &trans     &trans   &trans &trans    &trans  &trans  &kp C_MUTE     &kp C_VOL_UP &kp C_VOL_DN   &trans  &trans
              &trans    &trans     &trans   &trans &trans    &trans  &trans  &kp C_PP       &kp C_NEXT   &kp C_PREV     &trans  &trans
              &trans    &trans     &trans   &trans &trans    &trans  &trans  &trans         &trans       &trans         &trans  &trans
          >;
        };

    };
};
